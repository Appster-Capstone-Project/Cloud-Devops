name: Build & Deploy Docker App

on:
  push:
    branches:
      - main # Trigger when main branch of app source code changes
    paths:
      - 'app_source_code/**' # Only run if changes are in the app_source_code directory

env:
  ACR_NAME: youracrname001 # Replace with your Azure Container Registry name (e.g., myregistry.azurecr.io)
  IMAGE_NAME: your-app-image # Name of the image in ACR

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write # For OIDC authentication with Azure

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login for ACR
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Azure Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.ACR_NAME }}.azurecr.io
          username: ${{ secrets.AZURE_CLIENT_ID }} # Using SPN client ID for OIDC-based login
          password: ${{ secrets.AZURE_CLIENT_SECRET }} # Using SPN secret for OIDC-based login (azure/login ensures token is available)

      - name: Build and Push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./app_source_code # Path to your application's Dockerfile and source
          push: true
          tags: |
            ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:latest
            ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }} # Tag with commit SHA for versioning
          build-args: |
            CONTAINER_VERSION=${{ github.sha }} # Pass Git SHA as a build arg for app version
          file: ./app_source_code/Dockerfile

  trigger-ansible-update:
    needs: build-and-push # Ensure image is pushed before triggering update
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write # For OIDC authentication with Azure

    steps:
      - name: Checkout infrastructure code (for Ansible playbook)
        uses: actions/checkout@v4

      - name: Azure Login (to fetch VM IP for Ansible)
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Get VM Public IP Address from Terraform State
        # This uses 'azurerm_resource_group.rg.name' which is dynamic based on environment_name
        # Ensure you specify the correct resource group name where your VM resides.
        # This command reads the IP from the live Azure resource.
        run: |
          VM_RESOURCE_GROUP="docker-vm-rg-${{ env.TF_VAR_environment_name }}" # Matches RG name in Terraform
          VM_PUBLIC_IP=$(az network public-ip show \
            --resource-group $VM_RESOURCE_GROUP \
            --name flatcar-docker-docker-public-ip \
            --query ipAddress \
            --output tsv)
          echo "Fetched VM IP: $VM_PUBLIC_IP"
          echo "VM_PUBLIC_IP=$VM_PUBLIC_IP" >> $GITHUB_ENV
        env:
          TF_VAR_environment_name: 'dev' # Ensure this matches the environment your VM is deployed to

        name: Setup SSH Key for Ansible
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          # Add VM's public key to known_hosts to prevent SSH warnings
          ssh-keyscan -H ${{ env.VM_PUBLIC_IP }} >> ~/.ssh/known_hosts
        shell: bash

      - name: Create Ansible Inventory
        run: |
          echo "[vm_group]" > ansible/inventory.ini
          echo "${{ env.VM_PUBLIC_IP }} ansible_user=core ansible_ssh_private_key_file=~/.ssh/id_rsa" >> ansible/inventory.ini
        working-directory: ${{ github.workspace }}

      - name: Run Ansible Playbook to update Docker container
        run: |
          ansible-playbook -i ansible/inventory.ini ansible/playbooks/update_docker_app.yml \
            -e "app_tag_from_ci=${{ github.sha }}" # Pass the commit SHA as the image tag
        env:
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }} # Required by Ansible playbook for ACR login if not using Managed Identity
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        working-directory: ${{ github.workspace }} # Run from repo root to access 'ansible/'